# : << ENDOFCONF
# ^^ Crazy hack to be able to run conf file as an inline script for some fancy
#    scripting action, shamelessly borrowed from:
#    https://github.com/gpakosz/.config/tmux/blob/master/.config/tmux/tmux.conf
#    USAGE:  For a function named 'clone': `run "cut -c3- ~/.config/tmux/tmux.conf | sh -s clone #S"`

# Generic Settings
set -g    allow-rename         off
set -g    base-index           1
set -g    bell-action          none
set -g    default-shell       "${SHELL}"
# set -g    default-terminal    "${TERM}"
set -g    default-terminal    "screen-256color"
set -g    destroy-unattached   off
set -g    display-time         4000
set -g    escape-time          0
set -g    exit-empty           on
set -g    exit-unattached      off
set -g    focus-events         on
set -g    history-limit        10000
set -g    mouse                on
set -g    prefix               M-a
set -g    prefix2              C-b
set -g    renumber-windows     on
set -g    set-titles           on
set -g    set-titles-string    "#T"
set -g    status-interval      1
set -g    status-justify       left
set -g    status-left          '#(eval cut -c3- ~/.config/tmux/tmux.conf | sh -s status_left)'
set -g    status-left-length   0
set -g    status-position      top
set -g    status-right         '#(eval cut -c3- ~/.config/tmux/tmux.conf | sh -s status_right)'
set -g    status-right-length  100
set -g    visual-activity      off
set -g    visual-bell          off
set -g    visual-silence       off
set -g    xterm-keys           on
setw -g   aggressive-resize    on
setw -g   automatic-rename     on
setw -g   mode-keys            vi
setw -g   monitor-activity     off
setw -g   pane-base-index      1


# Custom Plugin Configurations
set -g @prefix_highlight_show_copy_mode 'on'

# the following will remove the smcup and rmcup capabilities for any term that
# reports itself as anything beginning with xterm. This tricks the terminal
# emulator into thinking tmux is a full screen application like pico or mutt,
# which will make the scrollback be recorded properly. Beware however, it will
# get a bit messed up when switching between windows/panes. Consider using
# tmux's native scrollback instead.
set -ga terminal-overrides ',xterm*:smcup@:rmcup@'
# Hack Terminfo to force 24 bit color support flags for some terminals
set -ga terminal-overrides ",xterm-termite:Tc"
set -ga terminal-overrides ",alacritty:Tc"
set -ga terminal-overrides ",rxvt-unicode-256color:Tc"
set -ga terminal-overrides ",xterm-256color:Tc"

#######################################################################
#### Theme & Colors
#######################################################################
# set -g   message-fg                   'red'
# set -g   message-bg                   'black'
# set -g   message-attr                 'none'
# set -g   message-command-fg           'white'
# set -g   message-command-bg           'black'
# set -g   message-command-attr         'dim'
set -g   pane-active-border-style     'bg=black fg=blue'
set -g   pane-border-style            'bg=black fg=black'
set -g   status-style                 'dim,bg=black,fg=white'
setw -g  clock-mode-colour            colour5
setw -g  mode-style                   'bright,fg=red,bg=black,bold'
setw -g  window-status-bell-style     'dim,fg=yellow,bg=black'
setw -g  window-status-style          'dim,fg=white,bg=black'
setw -g  window-status-current-style  'bright,fg=cyan,bg=black,bold'
setw -g  window-status-current-format '#W'
setw -g  window-status-format         '#W'

# if-shell 'test "$SSH_CONNECTION"' 'set -g status-bg red'


#######################################################################
#### Keybinds
#######################################################################

# clear out some unused keybinds
unbind %
unbind '"'
unbind C-b
unbind M-c
unbind [
unbind ]
unbind c
unbind n
unbind p
run-shell ~/.config/tmux/plugins/tmux-thumbs/tmux-thumbs.config/tmux

# Shortcut for session related actions
bind c command-prompt "new-session -A -s '%1'"
bind r command-prompt "rename-session %1"

# Switch to a new cloned session linked to the current one
bind M-c run "cut -c3- ~/.config/tmux/tmux.conf | sh -s clone #S"

# Shortcut for new window using PWD of focused window
bind n new-window -c "#{pane_current_path}"

# What do you think this is, emacs?
bind Escape copy-mode

# Clipboard integration stuff (Linux only ATM)
# bind -T copy-mode-vi v begin-selection
# bind -T copy-mode-vi V rectangle-toggle
# bind -T copy-mode-vi y copy-pipe "xclip -selection clipboard -in"
# bind -T copy-mode-vi Y copy-selection
bind p run "xclip -selection clipboard -out | tmux load-buffer - ; tmux paste-buffer"
bind P paste-buffer

# Shortcuts for pane management
# bind + run "tmux split-window -p 20 'zsh -ci jpane'"

bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r H resize-pane -L 5
bind -r L resize-pane -R 5

bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# Smart pane switching with awareness of vim splits ala http://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits
# Original concept from Mislav MarohniÄ‡, https://gist.github.com/mislav/5189704
# Simplified code from https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n  M-h      if-shell "$is_vim" "send-keys M-h" "select-pane -L"
bind -n  M-j      if-shell "$is_vim" "send-keys M-j" "select-pane -D"
bind -n  M-k      if-shell "$is_vim" "send-keys M-k" "select-pane -U"
bind -n  M-l      if-shell "$is_vim" "send-keys M-l" "select-pane -R"
bind -n  M-\      if-shell "$is_vim" "send-keys M-\\" "select-pane -l"
bind -n  M-o      select-pane -t :.+
bind     "c"      new-window -c "#{pane_current_path}"
bind     "|"      split-window -h -c "#{pane_current_path}"
bind     "%"      split-window -h -c "#{pane_current_path}"
bind     "-"      split-window -v -c "#{pane_current_path}"
bind     "_"      split-window -v -c "#{pane_current_path}"
bind     "+"      break-pane
bind     C-n      run "cut -c3- ~/.config/tmux/tmux.conf | sh -s doc_eval 'next-window'"
bind     C-p      run "cut -c3- ~/.config/tmux/tmux.conf | sh -s doc_eval 'previous-window'"
bind     "b"      run "cut -c3- ~/.config/tmux/tmux.conf | sh -s doc_eval 'last-window'"
bind     C-b      run "cut -c3- ~/.config/tmux/tmux.conf | sh -s doc_eval 'last-window'"
bind     M-a      run "cut -c3- ~/.config/tmux/tmux.conf | sh -s doc_eval 'last-window'"
bind     "e"      run "cut -c3- ~/.config/tmux/tmux.conf | sh -s doc_eval 'setw -g synchronize-panes on'"
bind     "E"      run "cut -c3- ~/.config/tmux/tmux.conf | sh -s doc_eval 'setw -g synchronize-panes off'"
bind     "M"      run "cut -c3- ~/.config/tmux/tmux.conf | sh -s doc_eval 'set -g mouse off'"
bind     "m"      run "cut -c3- ~/.config/tmux/tmux.conf | sh -s doc_eval 'set -g mouse on'"
bind     "R"      run "cut -c3- ~/.config/tmux/tmux.conf | sh -s smart_reload"
bind -n  C-Down   new-window
bind -n  C-Left   swap-window -t -1
bind -n  C-Right  swap-window -t +1
bind -n  M-Down   select-pane -D
bind -n  M-Left   select-pane -L
bind -n  M-Right  select-pane -R
bind -n  M-Up     select-pane -U
bind -n  S-Down   new-window
bind -n  S-Left   prev
bind -n  S-Right  next
bind -r  "<"      swap-window -t -1
bind -r  ">"      swap-window -t +1
bind -r  C-h      select-pane -L
bind -r  C-j      select-pane -D
bind -r  C-k      select-pane -U
bind -r  C-l      select-pane -R
bind -r  H        resize-pane -L 5
bind -r  J        resize-pane -D 5
bind -r  K        resize-pane -U 5
bind -r  L        resize-pane -R 5
bind -r  h        select-pane -L
bind -r  j        select-pane -D
bind -r  k        select-pane -U
bind -r  l        select-pane -R

# Mouse Rebinds
# bind -T root WheelUpPane   if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
# bind -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
# bind -t vi-copy    WheelUpPane   page-up
# bind -t vi-copy    WheelDownPane page-down
# bind -t emacs-copy WheelUpPane   page-up
# bind -t emacs-copy WheelDownPane page-down

#######################################################################
#### PLUGINS
#######################################################################
# Plugin Examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# run-shell "cut -c3- ~/.config/tmux/tmux.conf | sh -s init_tpm"  # Keep this last in ENDOFCONF!!
# ENDOFCONF
####
# status_left () {
#   echo '';
# }
# status_right () {
#   #printf "#[bg=black,fg=magenta,bold]%s#[default] "  "#W"
#   #printf "#[bg=black,fg=cyan,bold]%s#[default] "     "#I#F"
#   printf "#[bg=black,fg=cyan,bold]%s#[default] "      "$(whoami)"
#   printf "#[bg=black,fg=green,bold]%s#[default] "     "#S"
#   if test "$SSH_CONNECTION"; then
#     printf "#[bg=black,fg=red,bold]%s#[default]"    " $(hostname --short) "
#   fi
#  }
#### Clone the current session and append a suffix such as "$sess-1", "$sess-2", ...
# clone () {
#   session_id=${1%-*}
#   let suffix=$( tmux list-sessions -F '#S' | sed -nE "/^${session_id}-[0-9]+$/{s/[^0-9]//g;p}" | tail -n1 )+1
#   new_session_id="$session_id-$suffix"
#   TMUX= tmux new-session -d -t $session_id -s $new_session_id
#   tmux switch-client -t $new_session_id
#   tmux set -q -t $new_session_id destroy-unattached on
# }
#### Setup and initialize TPM ("Tmux Plugin Manager"). Should be executed nearly last in config.
# init_tpm() {
#   if ! test -d ~/.config/tmux/plugins; then
#     tmux display-message " installing ~/.config/tmux/plugins/tpm ... "
#     mkdir -p ~/.config/tmux/plugins >/dev/null
#     git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm
#   fi
#
#   tmux set -g @plugin 'tmux-plugins/tpm'
#   tmux run-shell -b '~/.config/tmux/plugins/tpm/tpm'
# }
#### Advanced reload function which installs TPM if it isn't already installed.
# smart_reload() {
#   tmux display-message " reloading.config/tmux/tmux.configuration ... "
#   tmux source-file ~/.config/tmux/tmux.conf
#   tmux display-message " reloaded.config/tmux/tmux.configuration! "
#   init_tpm
# }
#### Run a command after outputting it as a `display-message`, for self documenting settings.
# doc_eval() {
#   cmd="$*";
#   tmux display-message " $cmd "; tmux $cmd
# }
#### Execute the given arguments with the shell functions defined above.
# $@
#### vim: ft=tmux
